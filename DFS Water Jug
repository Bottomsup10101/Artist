def WaterJug(jugA, jugB, goal):
    stack = []
    visited = set()
    
    stack.append((0, 0))
    
    while stack:
        current_state = stack.pop()
        x, y = current_state
        print(f"Current state: ({x}, {y})")
        
        if x == goal or y == goal:
            print(f"Solution found at state: ({x}, {y})")
            return True

        if current_state in visited:
            continue

        visited.add(current_state)

        states = set()

        states.add((jugA, y))
        states.add((x, jugB))
        states.add((0, y))
        states.add((x, 0))
        pour_AtoB = min(x, jugB - y)
        states.add((x - pour_AtoB, y + pour_AtoB))
        pour_BtoA = min(y, jugA - x)
        states.add((x + pour_BtoA, y - pour_BtoA))

        for state in states:
            if state not in visited:
                stack.append(state)

    print("Solution not found.")
    return False


# Test case
jugA = 4  
jugB = 3  
goal = 2  

if WaterJug(jugA, jugB, goal):
    print("Solution found!")
else:
    print("Solution not found.")
