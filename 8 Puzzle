def print_puzzle(puzzle):
    for i in range(9):
        if i % 3 == 0 and i > 0:
            print("")  # New line after every 3 elements (to create rows)
        print(str(puzzle[i]) + " ", end="")
    print("") 

def calculate_heuristic(state):
    heuristic = 0
    goal_state = [1, 2, 3, 4, 5, 6, 7, 8, 0]
    for i in range(9):
        if state[i] != 0 and state[i] != goal_state[i]:  # Ignore the blank tile (0)
            heuristic += 1
    return heuristic

def find_best_move(possible_moves, zero_position, current_state):
    min_heuristic = float('inf')
    best_state = current_state.copy()

    for move in possible_moves:
        temp_state = current_state.copy()
        temp_state[zero_position], temp_state[move] = temp_state[move], temp_state[zero_position]

        current_heuristic = calculate_heuristic(temp_state)
        
        if current_heuristic < min_heuristic:
            min_heuristic = current_heuristic
            best_state = temp_state.copy()
    
    return best_state, min_heuristic  # Return the state with the best heuristic and its value

current_state = [1, 2, 3, 0, 5, 6, 4, 7, 8]

heuristic_value = calculate_heuristic(current_state)

level = 1

print("\n------ Level " + str(level) + " ------")
print_puzzle(current_state)
print("\nMisplaced Tiles: " + str(heuristic_value))

while heuristic_value > 0:
    zero_position = current_state.index(0)  # Find position of the blank tile (0)
    level += 1  # Increment the level (number of moves)

    if zero_position == 0:
        possible_moves = [1, 3]
    elif zero_position == 1:
        possible_moves = [0, 2, 4]
    elif zero_position == 2:
        possible_moves = [1, 5]
    elif zero_position == 3:
        possible_moves = [0, 4, 6]
    elif zero_position == 4:
        possible_moves = [1, 3, 5, 7]
    elif zero_position == 5:
        possible_moves = [2, 4, 8]
    elif zero_position == 6:
        possible_moves = [3, 7]
    elif zero_position == 7:
        possible_moves = [4, 6, 8]
    elif zero_position == 8:
        possible_moves = [5, 7]

    current_state, heuristic_value = find_best_move(possible_moves, zero_position, current_state)

    print("\n------ Level " + str(level) + " ------")
    print_puzzle(current_state)
    print("\nMisplaced Tiles: " + str(heuristic_value))

print("\nPuzzle Solved!")
